{"version":3,"file":"content.js","sourceRoot":"","sources":["../../src/browser_scripts/content.ts"],"names":[],"mappings":";;AAAA,6CAAmE;AACnE,iCAAqC;AACrC,sCAAoC;AAEpC,CAAC;IAEG;;OAEG;IACH,MAAM,mBAAmB;QAErB,YAAY,OAAgB;YACxB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QAC3B,CAAC;QAED,OAAO,CAAC,GAAW,EAAE,OAAmB;YACpC,OAAO,kBAAW,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;QACrF,CAAC;QAED,cAAc;YACV,OAAO,kBAAW,CAAC,gBAAgB,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC5D,CAAC;KACJ;IAED;;;OAGG;IACH,SAAS,eAAe,CAAC,QAAmB;QACxC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACvB,OAAO,CAAC,OAAO,CAAC,IAAI,mBAAmB,CAAC,OAAO,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,8BAA8B;IAC9B,kBAAW,CAAC,iBAAiB,CAAC;SACzB,IAAI,CAAC,WAAW,CAAC,EAAE;QAChB,IAAI,QAAQ,GAAc,EAAE,CAAC;QAC7B,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,GAAQ,EAAE,EAAE;YACrC,QAAQ,CAAC,IAAI,CAAC,qBAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QACH,OAAO,QAAQ,CAAC;IACpB,CAAC,EAAE,GAAG,CAAC,EAAE;QACL,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;IACzB,CAAC,CAAC;SACD,IAAI,CAAC,QAAQ,CAAC,EAAE;QACb,eAAe,CAAC,QAAQ,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;AAEX,CAAC,CAAC,EAAE,CAAC","sourcesContent":["import { Adapter, XHROptions, IAdapterContext } from \"adaptiveweb\";\nimport { sendMessage } from \"./util\";\nimport 'adaptiveweb/dist/reporting';\n\n(function() {\n\n    /**\n     * Routes AdapterContext calls through the background script\n     */\n    class ProxyAdapterContext implements IAdapterContext {\n        adapter: Adapter;\n        constructor(adapter: Adapter) {\n            this.adapter = adapter;\n        }\n\n        request(url: string, options: XHROptions): Promise<any> {\n            return sendMessage('request', { uuid: this.adapter.uuid, args: [url, options] });\n        }\n\n        getPreferences(): Promise<any> {\n            return sendMessage('getPreferences', this.adapter.uuid);\n        }\n    }\n\n    /**\n     * Callback for executing the adapters\n     * @param adapters the adapters to execute\n     */\n    function executeAdapters(adapters: Adapter[]) {\n        adapters.forEach(adapter => {\n            adapter.execute(new ProxyAdapterContext(adapter));\n        });\n    }\n\n    // Fetch the adapters from the\n    sendMessage('requestAdapters')\n        .then(rawAdapters => {\n            let adapters: Adapter[] = [];\n            (rawAdapters || []).forEach((raw: any) => {\n                adapters.push(Adapter.fromObject(raw));\n            });\n            return adapters;\n        }, err => {\n            throw new Error(err);\n        })\n        .then(adapters => {\n            executeAdapters(adapters);\n        });\n\n})();"]}