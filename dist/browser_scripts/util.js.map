{"version":3,"file":"util.js","sourceRoot":"","sources":["../../src/browser_scripts/util.ts"],"names":[],"mappings":";;AACA,MAAM,CAAC,GAAQ,MAAM,IAAI,OAAO,CAAC;AAEjC;;;;GAIG;AACH,SAAgB,WAAW,CAAC,WAAmB,EAAE,IAAU;IACvD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACxC,IAAI,QAAQ,GAAG,KAAK,CAAC;QACrB,IAAI,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC;YAChC,OAAO,EAAE,WAAW;YACpB,IAAI,EAAE,IAAI;SACb,EAAE,UAAS,QAAa;YACrB,IAAI,CAAC,QAAQ;gBAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,IAAI,OAAO,IAAI,SAAS,EAAE;YACtB,QAAQ,GAAG,IAAI,CAAC;YAChB,OAAO,CAAC,IAAI,CAAC,CAAC,GAAQ,EAAE,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;SAC5C;IACL,CAAC,CAAC,CAAC;AACP,CAAC;AAfD,kCAeC;AAED;;;;GAIG;AACH,SAAgB,aAAa,CAAC,QAAkB;IAC5C;;;;;;OAMG;IACH,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,MAAW,EAAE,MAAW,EAAE,YAAsB,EAAE,EAAE;QACjF,IAAI,OAAO,GAAiB,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACrD,IAAI,OAAO,IAAI,SAAS;YAAE,OAAO;QACjC,IAAI,YAAY,IAAI,SAAS;YACzB,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3C,OAAO,OAAO,CAAC;IACnB,CAAC,CAAC,CAAC;AACP,CAAC;AAfD,sCAeC","sourcesContent":["declare var chrome: any, browser: any;\nconst b: any = chrome || browser;\n\n/**\n * Sends a message\n * @param messageName the name of the message\n * @param data the data to send with the message\n */\nexport function sendMessage(messageName: string, data?: any): Promise<any> {\n    return new Promise<any>((resolve, reject) => {\n        let resolved = false;\n        let promise = b.runtime.sendMessage({\n            message: messageName,\n            data: data\n        }, function(response: any) {\n            if (!resolved) resolve(response);\n        });\n\n        if (promise != undefined) {\n            resolved = true;\n            promise.then((res: any) => resolve(res));\n        }\n    });\n}\n\n/**\n * Registers an event listener to listen for messages of a given name.\n * @param messageName the name of the message to listen for\n * @param callback the callback for handling the message\n */\nexport function handleMessage(callback: Function) {\n    /**\n     * NOTE: sendResponse is being deprecated in favour of promises, but browsers\n     * including Chrome still use sendResponse. As a temporary measure, both\n     * promises and sendResponse are being used here.\n     * \n     * See https://github.com/mozilla/webextension-polyfill/issues/16#issuecomment-296693219\n     */\n    b.runtime.onMessage.addListener((bundle: any, sender: any, sendResponse: Function) => {\n        let promise: Promise<any> = callback(bundle, sender);\n        if (promise == undefined) return;\n        if (sendResponse != undefined)\n            promise.then(res => sendResponse(res));\n        return promise;\n    });\n}"]}