{"version":3,"file":"WebExtXHRService.js","sourceRoot":"","sources":["../src/WebExtXHRService.ts"],"names":[],"mappings":";;AAEA;;GAEG;AACH,MAAa,gBAAgB;IAEzB;;;;OAIG;IACH,OAAO,CAAC,GAAW,EAAE,OAAmB;QACpC,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAExC,GAAG,GAAG,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;YAEvC,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;YAC5B,IAAI,OAAO,GAAG,MAAM,KAAK,KAAK,IAAI,MAAM,KAAK,OAAO,CAAC;YACrD,IAAI,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YAExB,qBAAqB;YACrB,IAAI,OAAO,CAAC,MAAM,IAAI,KAAK,EAAE;gBACzB,GAAG,IAAI,GAAG,CAAA;gBACV,KAAK,IAAI,KAAK,IAAI,IAAI,EAAE;oBACpB,GAAG,IAAI,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC;iBAC1C;gBAAA,CAAC;gBACF,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aAC1B;iBAAM,IAAI,OAAO,EAAE;gBAChB,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;aAClC;YAED,IAAI,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;YAC/B,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,KAAK,IAAI,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;YACrF,GAAG,CAAC,gBAAgB,CAAC,cAAc,EAAE,iCAAiC,CAAC,CAAC;YACxE,GAAG,CAAC,gBAAgB,CAAC,QAAQ,EAAE,0BAA0B,CAAC,CAAA;YAC1D,GAAG,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,IAAI,GAAG,CAAC,eAAe,CAAC;YACrE,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,GAAG,CAAC,OAAO,CAAC;YAE7C,gBAAgB;YAChB,IAAI,OAAO,GAAY,KAAK,CAAC;YAC7B,IAAI,MAAM,GAAa,GAAG,CAAC,KAAK,CAAC;YACjC,GAAG,CAAC,KAAK,GAAG;gBACR,OAAO,GAAG,IAAI,CAAC;gBACf,MAAM,EAAE,CAAC;YACb,CAAC,CAAA;YAED,GAAG,CAAC,kBAAkB,GAAG,GAAG,EAAE;gBAC1B,IAAI,OAAO;oBAAE,OAAO;gBAEpB,IAAI,GAAG,CAAC,UAAU,KAAK,CAAC,EAAE;oBACtB,IAAI;wBACA,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC;wBAC3E,IAAI,QAAQ,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;wBACrD,IAAI,OAAO;4BAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;6BAC1B;4BACD,IAAI,GAAG,GAAU,IAAI,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;4BAC7C,MAAM,CAAC,GAAG,CAAC,CAAC;yBACf;qBACJ;oBAAC,OAAO,CAAC,EAAE;wBACR,MAAM,CAAC,CAAC,CAAC,CAAC;qBACb;iBACJ;YACL,CAAC,CAAA;YAED,IAAI,OAAO;gBAAE,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;;gBAC/B,GAAG,CAAC,IAAI,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACR,CAAC;CAEH;AAjED,4CAiEC","sourcesContent":["import { XHRService, XHROptions } from \"adaptiveweb\";\n\n/**\n * WebExtensions implementation of the XHRService.\n */\nexport class WebExtXHRService implements XHRService {\n\n    /**\n     * Sends a XHR (AJAX) request and returns a promise.\n     * @param url the url to send the request to. Can contain interpolations.\n     * @param options The options of the request.\n     */\n    request(url: string, options: XHROptions): Promise<any> {\n        return new Promise<any>((resolve, reject) => {\n\n            url = options.encodeUrlParameters(url);\n\n            let method = options.method;\n            let useBody = method !== 'GET' && method !== 'TRACE'; \n            let data = options.data;\n\n            // add url parameters\n            if (options.method == 'GET') {\n                url += '?'\n                for (let param in data) {\n                    url += param + '=' + data[param] + '&';\n                };\n                url = url.slice(0, -1);\n            } else if (useBody) {\n                data = options.serialize(data);\n            }\n\n            let req = new XMLHttpRequest();\n            req.open(options.method, url, options.async || true, options.user, options.password);\n            req.setRequestHeader('Content-Type', 'application/json; charset=utf-8');\n            req.setRequestHeader('Accept', 'application/json, text/*')\n            req.withCredentials = options.withCredentials || req.withCredentials;\n            req.timeout = options.timeout || req.timeout;\n\n            // Handle aborts\n            let aborted: boolean = false;\n            let _abort: Function = req.abort;\n            req.abort = function() {\n                aborted = true;\n                _abort();\n            }\n\n            req.onreadystatechange = () => {\n                if (aborted) return;\n\n                if (req.readyState === 4) {\n                    try {\n                        let success = (req.status >= 200 && req.status < 300) || req.status == 304;\n                        let response = options.deserialize(req.responseText);\n                        if (success) resolve(response);\n                        else {\n                            let err: Error = new Error(req.responseText);\n                            reject(err);\n                        }\n                    } catch (e) {\n                        reject(e);\n                    }\n                }\n            }\n\n            if (useBody) req.send(options.data);\n            else req.send();\n        });\n   }\n\n}"]}